#!/usr/bin/env ruby
# encoding: utf-8

require 'git/gitlab'
require "thor"

class GitGitlabCLI < Thor
	@@gitlab = GitlabKernel.new

	desc "merge SOURCE TARGET --assign ${ASSING}", "create mergerequest SOURCE to TARGET. assign to ${ASSING}"
	option :assign
	def merge(source = nil, target = nil)
		title = source
		assign = options[:assign]
		begin
			url = if target == nil
				@@gitlab.create_merge_request(title, assign, source)
			else
				@@gitlab.create_merge_request(title, assign, source, target)
			end
		rescue GitlabKernel::Error::MergeRequestError => e
			puts("Failed Create Merge Request")
			puts("Please check your command's argument ,options and already exists mergerequests...")
			raise e
		end
		puts("created mergerequest at")
		puts(url)
	end

	desc "issue ID", "show issue which has ID"
	def issue(id)
		begin
			issue = @@gitlab.issue(id)
		rescue GitlabKernel::Error::IssueNotFound => e
			puts("Could not find \##{id} issue!!")
			exit 1
		end

		puts("\##{issue.iid}")
		puts("title      : #{issue.title}")
		puts("description: #{issue.description}")
		puts("label      : #{issue.labels.join(',')}")
		puts("state      : #{issue.state}")
		if issue.assignee != nil
			puts("assignee   : #{issue.assignee.username}")
		end
	end

	def help
		user = @@gitlab.authorize
		puts("You are #{user.username}")		
		puts("Gitlab is #{Gitlab.endpoint}")
		super
	end
end

GitGitlabCLI.start